#!/bin/sh
#
# mbp-parse-all - parses all output from mbp-gather for analysis
#
# Copyright (C) 2014 by Chris Pappalardo (cpappala@yahoo.com)
#
# Some elements originally published in High Performance MySQL (3rd edition), Schwartz
# Copyright (C) 2012 Baron Schwartz, et al

# initialize variables
DBPASS=""
DBUSER=$USER
INPUTDIR=$(pwd -P)
MAXDEPTH="-maxdepth 1" # default is to process files in INPUTDIR only
OUTPUTDIR=$(pwd -P)
SCRIPTDIR=$(dirname $0)

# get and process cli args
while getopts "hi:o:p:ru:" arg; do
    case $arg in
	h) echo "\
Usage:  $(basename $0) [-h] [-i dir] [-o dir] [-p password] [-r] [-u username]
Parse mbp-gather data into QPS, diskstats, lsof, query log profile reports
Where:
  -h  help (this)
  -i  path containing data files (current by default)
  -o  path where reports will be created (current by default)
  -p  sets db password
  -r  turns input file recursion on
  -u  sets db username"; exit 1;;
	i) INPUTDIR=$(echo "$OPTARG" | sed -e 's/\/$//');;
	o) OUTPUTDIR=$(echo "$OPTARG" | sed -e 's/\/$//');;
	p) DBPASS="-p$OPTARG";;
	u) DBUSER=$OPTARG;;
	r) MAXDEPTH="";;
	*) echo "use -h for help"; exit 1;;
    esac
done

# set report filename root to YYYY-MM-DD_HH-<INPUTDIR_parent> of first status file
STATUSFILE=$(find $INPUTDIR $MAXDEPTH -type f -name "*-status" | \
    sort -d | grep -m 1 -E -o '[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}')
if [ -z "$STATUSFILE" ]; then
    echo "error - could not find status data file(s) in $INPUTDIR"; 
    exit 1;
fi
NAMEROOT=$STATUSFILE-$(basename $INPUTDIR)

# generate reports
echo "Generating $NAMEROOT-QPS"
$SCRIPTDIR/mbp-parse-status $INPUTDIR/*-status > $OUTPUTDIR/$NAMEROOT-QPS
echo "Generating $NAMEROOT-diskstats for sda"
pt-diskstats $INPUTDIR/*-diskstats | grep -E 'sda\s' > $OUTPUTDIR/$NAMEROOT-diskstats
echo "Generating $NAMEROOT-lsof"
$SCRIPTDIR/mbp-parse-lsof $INPUTDIR/*-lsof > $OUTPUTDIR/$NAMEROOT-lsof
echo "Generating $NAMEROOT-tcpdump-queryprofile"
pt-query-digest --type tcpdump $INPUTDIR/*-tcpdump > $OUTPUTDIR/$NAMEROOT-tcpdump-queryprofile
echo "Generating $NAMEROOT-unindexed-queries"
pt-query-digest --type tcpdump --filter '($event->{No_index_used} eq "Yes" || $event->{No_good_index_used} eq "Yes")' \
    $INPUTDIR/*-tcpdump > $OUTPUTDIR/$NAMEROOT-unindexed-queries
if [ -e $INPUTDIR/mysql-slow.log ]; then # mysql-slow.log will not always be available
    echo "Generating $NAMEROOT-slow-queryprofile"
    pt-query-digest $INPUTDIR/mysql-slow.log > $OUTPUTDIR/$NAMEROOT-slow-queryprofile
    echo "Generating $NAMEROOT-unused-indexes"
    pt-index-usage -u $DBUSER $DBPASS $INPUTDIR/mysql-slow.log > $OUTPUTDIR/$NAMEROOT-unused-indexes
fi